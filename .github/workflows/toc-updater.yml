name: Update TOC Interface version(s)

on:
  schedule:
    - cron: 00 * * * *

env:
  MAINLINE_NAME: The War Within
  CLASSIC_NAME: Mists of Pandaria
  RETAIL_TOC: WhoTaunted.toc
  CLASSIC_TOC: WhoTaunted_Mists.toc
  CHANGELOG: CHANGELOG.md
  README: README.md
  TOC_FORMAT_WEBSITE: https://warcraft.wiki.gg/wiki/TOC_format
  TOC_FORMAT_WEBSITE_MAINLINE: https://blizztrack.com/view/wow?type=versions
  TOC_FORMAT_API_MAINLINE: https://blizztrack.com/api/manifest/wow/versions
  TOC_FORMAT_WEBSITE_CLASSIC: https://blizztrack.com/view/wow_classic?type=versions
  TOC_FORMAT_API_CLASSIC: https://blizztrack.com/api/manifest/wow_classic/versions
  API_CHANGE_SUMMARIES: https://warcraft.wiki.gg/wiki/API_change_summaries
  CURSEFORGE_WEBSITE: https://www.curseforge.com/wow/addons/who-taunted/files
  WOWINTERFACE_WEBSITE: https://www.wowinterface.com/downloads/info14842-WhoTaunted.html
  WAGO_WEBSITE: https://addons.wago.io/addons/who-taunted/versions

jobs:
  toc-update:
    runs-on: ubuntu-22.04

    steps:
      - name: Clone Project
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Fetch Repo Tags
        run: git fetch --tags

      - name: Check Blizztrack API Status
        id: check_blizztrack
        run: |
          #!/bin/bash
          # Test Mainline and Classic API for expected response content
          MAINLINE_RESPONSE=$(curl -s "${{ env.TOC_FORMAT_API_MAINLINE }}")
          CLASSIC_RESPONSE=$(curl -s "${{ env.TOC_FORMAT_API_CLASSIC }}")

          # Check for expected content in both API responses
          if echo "$MAINLINE_RESPONSE" | grep -q '"version_name"' && \
            echo "$CLASSIC_RESPONSE" | grep -q '"version_name"'; then
            BLIZZTRACK_ONLINE=true
          else
            BLIZZTRACK_ONLINE=false
          fi

          echo "Blizztrack Online: $BLIZZTRACK_ONLINE"
          echo "blizztrack_online=$BLIZZTRACK_ONLINE" >> $GITHUB_OUTPUT

      - name: Extract Repo Interface Numbers
        id: repo_extract_interface
        run: |
          #!/bin/bash
          MAINLINE_INTERFACE_NUMBER=$(grep -oP '## Interface: \K\d+' $RETAIL_TOC)
          echo "Repo Mainline Interface Number: $MAINLINE_INTERFACE_NUMBER"
          echo "mainline_interface_number=$MAINLINE_INTERFACE_NUMBER" >> $GITHUB_OUTPUT

          CLASSIC_INTERFACE_NUMBER=$(grep -oP '## Interface: \K\d+' $CLASSIC_TOC)
          echo "Repo Classic Interface Number: $CLASSIC_INTERFACE_NUMBER"
          echo "classic_interface_number=$CLASSIC_INTERFACE_NUMBER" >> $GITHUB_OUTPUT

      - name: Extract Repo Versions
        id: repo_extract_version
        run: |
          #!/bin/bash
          MAINLINE_VERSION=$(grep -oP '${{ env.MAINLINE_NAME }} \(\K[^\)]+' $README)
          echo "Mainline version: $MAINLINE_VERSION"
          echo "mainline_version=$MAINLINE_VERSION" >> $GITHUB_OUTPUT

          CLASSIC_VERSION=$(grep -oP '${{ env.CLASSIC_NAME }} \(\K[^\)]+' $README)
          echo "Classic version: $CLASSIC_VERSION"
          echo "classic_version=$CLASSIC_VERSION" >> $GITHUB_OUTPUT

      - name: Get Latest Mainline Version Number (Blizztrack)
        id: mainline_version_blizztrack
        if: ${{ steps.check_blizztrack.outputs.blizztrack_online == 'true' }}
        run: |
          #!/bin/bash
          # Fetch JSON data from Blizztrack API
          JSON_DATA=$(curl -s "${{ env.TOC_FORMAT_API_MAINLINE }}" -H "accept: application/json")

          # Parse the JSON to extract the version number for "Americas"
          VERSION=$(echo "$JSON_DATA" | jq -r '.result.data[] | select(.name == "Americas") | .version_name | split(".")[:3] | join(".")')

          # Convert version to interface number
          INTERFACE_NUMBER=$(echo "$VERSION" | awk -F. '{printf "%d%02d%02d", $1, $2, $3}')

          echo "Mainline Version: $VERSION"
          echo "Mainline Interface Number: $INTERFACE_NUMBER"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "interface_number=$INTERFACE_NUMBER" >> $GITHUB_OUTPUT

      - name: Get Latest Classic Version Number (Blizztrack)
        id: classic_version_blizztrack
        if: ${{ steps.check_blizztrack.outputs.blizztrack_online == 'true' }}
        run: |
          #!/bin/bash
          # Fetch JSON data from the Blizztrack API
          JSON_DATA=$(curl -X GET "${{ env.TOC_FORMAT_API_CLASSIC }}" -H  "accept: application/json")

          # Parse the JSON to extract the version number for "Americas"
          VERSION=$(echo "$JSON_DATA" | jq -r '.result.data[] | select(.name == "Americas") | .version_name | split(".")[:3] | join(".")')

          # Convert version to interface number
          INTERFACE_NUMBER=$(echo "$VERSION" | awk -F. '{printf "%d%02d%02d", $1, $2, $3}')

          echo "Classic Version: $VERSION"
          echo "Classic Interface Number: $INTERFACE_NUMBER"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "interface_number=$INTERFACE_NUMBER" >> $GITHUB_OUTPUT

      - name: Update Mainline TOC (Blizztrack)
        if: ${{ steps.check_blizztrack.outputs.blizztrack_online == 'true' }}
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "${{ steps.repo_extract_interface.outputs.mainline_interface_number }}"
          replace: "${{ steps.mainline_version_blizztrack.outputs.interface_number }}"
          regex: false

      - name: Update Classic TOC (Blizztrack)
        if: ${{ steps.check_blizztrack.outputs.blizztrack_online == 'true' }}
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "${{ steps.repo_extract_interface.outputs.classic_interface_number }}"
          replace: "${{ steps.classic_version_blizztrack.outputs.interface_number }}"
          regex: false

      - name: Update Mainline TOC (Fallback)
        if: ${{ steps.check_blizztrack.outputs.blizztrack_online == 'false' }}
        uses: oppzippy/update-toc-action@v1
        with:
          toc-path: "$RETAIL_TOC"
          product: "wow"

      - name: Update Classic TOC (Fallback)
        if: ${{ steps.check_blizztrack.outputs.blizztrack_online == 'false' }}
        uses: oppzippy/update-toc-action@v1
        with:
          toc-path: "$CLASSIC_TOC"
          product: "wow_classic"

      - name: Extract Post-Update Interface Numbers
        id: extract_interface
        run: |
          #!/bin/bash
          MAINLINE_INTERFACE_NUMBER=$(grep -oP '## Interface: \K\d+' $RETAIL_TOC)
          echo "Post-update Mainline Interface Number: $MAINLINE_INTERFACE_NUMBER"
          echo "mainline_interface_number=$MAINLINE_INTERFACE_NUMBER" >> $GITHUB_OUTPUT

          CLASSIC_INTERFACE_NUMBER=$(grep -oP '## Interface: \K\d+' $CLASSIC_TOC)
          echo "Post-update Classic Interface Number: $CLASSIC_INTERFACE_NUMBER"
          echo "classic_interface_number=$CLASSIC_INTERFACE_NUMBER" >> $GITHUB_OUTPUT

      - name: Check if new version Branch Already Exists
        id: check_branch
        run: |
          #!/bin/bash
          BRANCH_NAME=mainline-${{ steps.extract_interface.outputs.mainline_interface_number }}-classic-${{ steps.extract_interface.outputs.classic_interface_number }}
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Branch $BRANCH_NAME does not exist"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Get Mainline Version Number (Fallback)
        if: ${{ (steps.check_blizztrack.outputs.blizztrack_online == 'false') && (steps.check_branch.outputs.branch_exists == 'false') && (steps.repo_extract_interface.outputs.mainline_interface_number != steps.extract_interface.outputs.mainline_interface_number || steps.repo_extract_interface.outputs.classic_interface_number != steps.extract_interface.outputs.classic_interface_number) }}
        id: mainline_version_wiki
        run: |
          #!/bin/bash

          # Fall back to warcraft.wiki.gg
          html_content=$(curl -s "${{ env.TOC_FORMAT_WEBSITE }}")

          # Find the line containing the interface number
          line=$(echo "$html_content" | grep -B 1 '<code>${{ steps.extract_interface.outputs.mainline_interface_number }}</code>' | head -n 1)

          # Extract the version number from the table
          VERSION=$(echo "$line" | sed -n 's/.*<td>\(.*\)<\/td>.*/\1/p')

          echo "Mainline Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get Classic Version Number (Fallback)
        if: ${{ (steps.check_blizztrack.outputs.blizztrack_online == 'false') && (steps.check_branch.outputs.branch_exists == 'false') && (steps.repo_extract_interface.outputs.mainline_interface_number != steps.extract_interface.outputs.mainline_interface_number || steps.repo_extract_interface.outputs.classic_interface_number != steps.extract_interface.outputs.classic_interface_number) }}
        id: classic_version_wiki
        run: |
          #!/bin/bash

          # Fall back to warcraft.wiki.gg
          html_content=$(curl -s "${{ env.TOC_FORMAT_WEBSITE }}")

          # Find the line containing the interface number
          line=$(echo "$html_content" | grep -B 1 '<code>${{ steps.extract_interface.outputs.classic_interface_number }}</code>' | head -n 1)

          # Extract the version number from the table
          VERSION=$(echo "$line" | sed -n 's/.*<td>\(.*\)<\/td>.*/\1/p')

          echo "Classic Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set Mainline Version Number
        id: mainline_version
        run: |
          #!/bin/bash

          if '${{ steps.check_blizztrack.outputs.blizztrack_online }}' == 'true'; then
            VERSION="${{ steps.mainline_version_blizztrack.outputs.version }}"
            INTERFACE_NUMBER="${{ steps.mainline_version_blizztrack.outputs.interface_number }}"
          else
            VERSION="${{ steps.mainline_version_wiki.outputs.version }}"
            INTERFACE_NUMBER="${{ steps.extract_interface.outputs.mainline_interface_number }}"
          fi

          echo "Mainline Version: $VERSION"
          echo "Mainline Interface Number: $INTERFACE_NUMBER"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "interface_number=$INTERFACE_NUMBER" >> $GITHUB_OUTPUT

      - name: Set Classic Version Number
        id: classic_version
        run: |
          #!/bin/bash

          if '${{ steps.check_blizztrack.outputs.blizztrack_online }}' == 'true'; then
            VERSION="${{ steps.classic_version_blizztrack.outputs.version }}"
            INTERFACE_NUMBER="${{ steps.classic_version_blizztrack.outputs.interface_number }}"
          else
            VERSION="${{ steps.classic_version_wiki.outputs.version }}"
            INTERFACE_NUMBER="${{ steps.extract_interface.outputs.classic_interface_number }}"
          fi

          echo "Classic Version: $VERSION"
          echo "Classic Interface Number: $INTERFACE_NUMBER"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "interface_number=$INTERFACE_NUMBER" >> $GITHUB_OUTPUT

      - name: Find and Replace Mainline Version Number (Blizztrack)
        if: ${{ (steps.check_blizztrack.outputs.blizztrack_online == 'true') && (steps.check_branch.outputs.branch_exists == 'false') && ((steps.repo_extract_interface.outputs.mainline_interface_number != steps.extract_interface.outputs.mainline_interface_number) && (steps.mainline_version.outputs.version != '')) }}
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "${{ env.MAINLINE_NAME }} (${{ steps.repo_extract_version.outputs.mainline_version}})"
          replace: "${{ env.MAINLINE_NAME }} (${{ steps.mainline_version.outputs.version }})"
          regex: false

      - name: Find and Replace Classic Version Number (Blizztrack)
        if: ${{ (steps.check_blizztrack.outputs.blizztrack_online == 'true') && (steps.check_branch.outputs.branch_exists == 'false') && ((steps.repo_extract_interface.outputs.classic_interface_number != steps.extract_interface.outputs.classic_interface_number) && (steps.classic_version.outputs.version != '')) }}
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "${{ env.CLASSIC_NAME }} (${{ steps.repo_extract_version.outputs.classic_version }})"
          replace: "${{ env.CLASSIC_NAME }} (${{ steps.classic_version.outputs.version }})"
          regex: false

      - name: Get Next who-taunted Increment Version
        id: get_version_number
        if: ${{ (steps.check_branch.outputs.branch_exists == 'false') && (steps.repo_extract_interface.outputs.mainline_interface_number != steps.extract_interface.outputs.mainline_interface_number || steps.repo_extract_interface.outputs.classic_interface_number != steps.extract_interface.outputs.classic_interface_number) }}
        run: |
          #!/bin/bash
          # Get the latest tag and remove the 'v' prefix
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) | sed 's/^v//')
          echo "Latest tag: $LATEST_TAG"

          # Parse the latest tag into major, minor, patch
          IFS='.' read -r major minor patch <<<"$LATEST_TAG"

          # Increment patch version (adjust as needed for minor or major)
          patch=$((patch + 1))

          # Create the new version tag
          NEW_VERSION="v$major.$minor.$patch"
          echo "New tag: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build Changelog Compatibility Strings
        if: ${{ (steps.check_branch.outputs.branch_exists == 'false') && ((steps.repo_extract_interface.outputs.mainline_interface_number != steps.extract_interface.outputs.mainline_interface_number || steps.repo_extract_interface.outputs.classic_interface_number != steps.extract_interface.outputs.classic_interface_number) && (steps.mainline_version.outputs.version != '' && steps.classic_version.outputs.version != '')) }}
        id: changelog
        run: |
          #!/bin/bash
          MAINLINE_COMPATIBILITY_STRING=""
          CLASSIC_COMPATIBILITY_STRING=""

          if [ "${{ steps.repo_extract_interface.outputs.mainline_interface_number }}" != "${{ steps.extract_interface.outputs.mainline_interface_number }}" ]; then
              MAINLINE_COMPATIBILITY_STRING="- ${{ steps.mainline_version.outputs.version }} ${{ env.MAINLINE_NAME }} compatibility."
          fi
          if [ "${{ steps.repo_extract_interface.outputs.classic_interface_number }}" != "${{ steps.extract_interface.outputs.classic_interface_number }}" ]; then
              CLASSIC_COMPATIBILITY_STRING="- ${{ steps.classic_version.outputs.version }} ${{ env.CLASSIC_NAME }} compatibility."
          fi

          echo "Compatibility:"
          echo "$MAINLINE_COMPATIBILITY_STRING"
          echo "mainline_compatibility=$MAINLINE_COMPATIBILITY_STRING" >> $GITHUB_OUTPUT
          echo "$CLASSIC_COMPATIBILITY_STRING"
          echo "classic_compatibility=$CLASSIC_COMPATIBILITY_STRING" >> $GITHUB_OUTPUT

      - name: Build Release/Tag Compatibility String
        if: ${{ (steps.check_branch.outputs.branch_exists == 'false') && (steps.repo_extract_interface.outputs.mainline_interface_number != steps.extract_interface.outputs.mainline_interface_number || steps.repo_extract_interface.outputs.classic_interface_number != steps.extract_interface.outputs.classic_interface_number) }}
        id: changelog_release
        run: |
          #!/bin/bash
          INPUT_STRING=""

          # Add Mainline compatibility line if there is a change
          if [ "${{ steps.changelog.outputs.mainline_compatibility }}" != "" ]; then
            INPUT_STRING+='${{ steps.changelog.outputs.mainline_compatibility }}%0A'
          fi

          # Add Classic compatibility line if there is a change
          if [ "${{ steps.changelog.outputs.classic_compatibility }}" != "" ]; then
            INPUT_STRING+='${{ steps.changelog.outputs.classic_compatibility }}'
          fi

          echo "Input String:"
          echo "$INPUT_STRING"

          # Replace white spaces with '%20'
          ENCODED_STRING=$(echo "$INPUT_STRING" | sed 's/ /%20/g')

          echo "Encoded String:"
          echo "$ENCODED_STRING"
          echo "encoded_string=$ENCODED_STRING" >> $GITHUB_OUTPUT

      - name: Update README.md
        if: ${{ (steps.check_branch.outputs.branch_exists == 'false') && (steps.repo_extract_interface.outputs.mainline_interface_number != steps.extract_interface.outputs.mainline_interface_number || steps.repo_extract_interface.outputs.classic_interface_number != steps.extract_interface.outputs.classic_interface_number) }}
        run: |
          #!/bin/bash
          FILE_PATCH="README.md"
          NEW_LINES="## [${{ steps.get_version_number.outputs.new_version }}](https://github.com/Davie3/who-taunted/releases/tag/${{ steps.get_version_number.outputs.new_version }})
          "

          # Add Mainline compatibility line if there is a change
          if [ "${{ steps.changelog.outputs.mainline_compatibility }}" != "" ]; then
          NEW_LINES+="${{ steps.changelog.outputs.mainline_compatibility }}
          "
          fi

          # Add Classic compatibility line if there is a change
          if [ "${{ steps.changelog.outputs.classic_compatibility }}" != "" ]; then
          NEW_LINES+="${{ steps.changelog.outputs.classic_compatibility }}
          "
          fi

          echo "$NEW_LINES"

          start_line=$(grep -n "## Change Log" "$FILE_PATCH" | cut -d: -f1)
          awk -v start="$start_line" -v lines="$NEW_LINES" 'NR==start+1 {print lines} {print}' "$FILE_PATCH" >tmpfile && mv tmpfile "$FILE_PATCH"

      - name: Update CHANGELOG.md
        if: ${{ (steps.check_branch.outputs.branch_exists == 'false') && (steps.repo_extract_interface.outputs.mainline_interface_number != steps.extract_interface.outputs.mainline_interface_number || steps.repo_extract_interface.outputs.classic_interface_number != steps.extract_interface.outputs.classic_interface_number) }}
        run: |
          #!/bin/bash
          echo "## [${{ steps.get_version_number.outputs.new_version }}](https://github.com/Davie3/who-taunted/releases/tag/${{ steps.get_version_number.outputs.new_version }})" >> temp_changelog.txt

          # Add Mainline compatibility line if there is a change
          if [ "${{ steps.changelog.outputs.mainline_compatibility }}" != "" ]; then
            echo "${{ steps.changelog.outputs.mainline_compatibility }}" >> temp_changelog.txt
          fi

          # Add Classic compatibility line if there is a change
          if [ "${{ steps.changelog.outputs.classic_compatibility }}" != "" ]; then
            echo "${{ steps.changelog.outputs.classic_compatibility }}" >> temp_changelog.txt
          fi

          echo "" >> temp_changelog.txt
          cat $CHANGELOG >> temp_changelog.txt
          mv temp_changelog.txt $CHANGELOG

      - name: Create Pull Request
        if: ${{ (steps.check_branch.outputs.branch_exists == 'false') && ((steps.repo_extract_interface.outputs.mainline_interface_number != steps.extract_interface.outputs.mainline_interface_number || steps.repo_extract_interface.outputs.classic_interface_number != steps.extract_interface.outputs.classic_interface_number) && (steps.mainline_version.outputs.version != '' && steps.classic_version.outputs.version != '')) }}
        uses: peter-evans/create-pull-request@v7
        with:
          title: ${{ steps.get_version_number.outputs.new_version }}
          commit-message: Update WoW Version - mainline-${{ steps.extract_interface.outputs.mainline_interface_number }}-classic-${{ steps.extract_interface.outputs.classic_interface_number }}
          branch: mainline-${{ steps.extract_interface.outputs.mainline_interface_number }}-classic-${{ steps.extract_interface.outputs.classic_interface_number }}
          body: |
            ## Current Repo Versions
            - Repo Mainline Version Number: `${{ steps.repo_extract_version.outputs.mainline_version }}`
            - Repo Mainline Interface Number: `${{ steps.repo_extract_interface.outputs.mainline_interface_number }}`
            - Repo Classic Version Number: `${{ steps.repo_extract_version.outputs.classic_version }}`
            - Repo Classic Interface Number: `${{ steps.repo_extract_interface.outputs.classic_interface_number }}`

            ## Latest WoW Versions
            - Latest Mainline Version Number: `${{ steps.mainline_version.outputs.version }}`
            - Latest Mainline Interface Number: `${{ steps.extract_interface.outputs.mainline_interface_number }}`
            - Latest Classic Version Number: `${{ steps.classic_version.outputs.version }}`
            - Latest Classic Interface Number: `${{ steps.extract_interface.outputs.classic_interface_number }}`

            ## Version Checklist
            - [ ] Review [TOC Format Reference](${{ env.TOC_FORMAT_WEBSITE }})
            - [ ] Review [Mainline TOC Interface Version](${{ env.TOC_FORMAT_WEBSITE_MAINLINE }})
            - [ ] Review [Classic TOC Interface Version](${{ env.TOC_FORMAT_WEBSITE_CLASSIC }})
            - [ ] Review [API Change Summaries](${{ env.API_CHANGE_SUMMARIES }})
            - [ ] Verify `CHANGELOG.md`
            - [ ] Verify `README.md`
            - [ ] Remove debug code
            - [ ] Create [new version tag/release](https://github.com/Davie3/who-taunted/releases/new?tag=${{ steps.get_version_number.outputs.new_version }}&title=${{ steps.get_version_number.outputs.new_version }}&target=mainline-${{ steps.extract_interface.outputs.mainline_interface_number }}-classic-${{ steps.extract_interface.outputs.classic_interface_number }}&prerelease=0&body=${{ steps.changelog_release.outputs.encoded_string }})
            - [ ] Verify [CurseForge Package](${{ env.CURSEFORGE_WEBSITE }})
            - [ ] Verify [WoWInterface Package](${{ env.WOWINTERFACE_WEBSITE }})
            - [ ] Verify [Wago Package](${{ env.WAGO_WEBSITE }})
            - [ ] Merge PR
          assignees: davie3
          labels: |
            compatibility
            mainline
            classic
          delete-branch: true
